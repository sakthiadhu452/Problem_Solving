#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* readline();
char* ltrim(char*);
char* rtrim(char*);
char** split_string(char*);

int parse_int(char*);

 
 
int check(char **matrix, int **copy, int st_r, int st_cl, int k,int matrix_row,int matrix_col) {
    int c = 0;
    
    //checking the surronding if more than one empty cells updating the k
    if (copy[st_r][st_cl] == 0) {
        if (st_r + 1 < matrix_row && (matrix[st_r + 1][st_cl] == '.'|| matrix[st_r + 1][st_cl] == '*')) {
            c++;
        }
        if (st_r - 1 >= 0 && (matrix[st_r - 1][st_cl] == '.' || matrix[st_r - 1][st_cl] == '*')) {
            c++;
        }
        if (st_cl + 1 < matrix_col && (matrix[st_r][st_cl + 1] == '.' || matrix[st_r][st_cl + 1] == '*')) {
            c++;
        }
        if (st_cl - 1 >= 0 && (matrix[st_r][st_cl - 1] == '.' || matrix[st_r][st_cl - 1] == '*')) {
            c++;
        }
    }
    
    
// checking if already the current cell
    if (c > 1 && matrix[st_r][st_cl] != '*') {
        k--;
        copy[st_r][st_cl] = 1;
    }
    
    
    
    return k;
}
//by backtracking
char* countLuck(int matrix_row, int matrix_col, int st_r, int st_cl, char** matrix,int** copy, int k) {
    char * result;
    int flag=0;
    
    k=check(matrix,copy,st_r,st_cl,k,matrix_row,matrix_col);//calling check function for eavh position
    if (k == 0 && matrix[st_r][st_cl] == '*') {
        return "Impressed";
    }//each time i check the k and update if k ==0 i have printed "Impresses" else "Oops".
     
    if (k != 0 && matrix[st_r][st_cl] == '*') {
        return "Oops!";
    }

    if ((st_cl)-1 >= 0 && (matrix[st_r][(st_cl)-1] == '.' || matrix[st_r][(st_cl)-1] == '*') && matrix[st_r][(st_cl)-1] != '0') {
        
        matrix[st_r][(st_cl)] = '0';
        result = countLuck(matrix_row, matrix_col, st_r, st_cl-1, matrix,copy, k);
        
        if (result != 0) {
            return result;
        }
        matrix[st_r][(st_cl)-1] = '.';  // Backtrack
    }
     
    if ((st_cl)+1 < matrix_col && (matrix[st_r][(st_cl)+1] == '.' || matrix[st_r][(st_cl)+1] == '*') && matrix[st_r][(st_cl)+1] != '0') {
        
        matrix[st_r][(st_cl)] = '0';
        result = countLuck(matrix_row, matrix_col, st_r, st_cl+1, matrix, copy,k);
        if (result != 0) {
            return result;
        }
        matrix[st_r][(st_cl)+1] = '.';  // Backtrack
    }

    if ((st_r)-1 >= 0 && (matrix[st_r-1][(st_cl)] == '.' || matrix[st_r-1][(st_cl)] == '*') && matrix[st_r-1][(st_cl)] != '0') {
     
        matrix[st_r][(st_cl)] = '0';
        result = countLuck(matrix_row, matrix_col, st_r-1, st_cl, matrix,copy, k);
        if (result != 0) {
            return result;
        }
        matrix[st_r-1][(st_cl)] = '.';  // Backtrack
    }

    if ((st_r)+1 < matrix_row && (matrix[st_r+1][(st_cl)] == '.' || matrix[st_r+1][(st_cl)] == '*') && matrix[st_r+1][(st_cl)] != '0') {
        matrix[st_r][(st_cl)] = '0';
        result = countLuck(matrix_row, matrix_col, st_r+1, st_cl, matrix,copy, k);
        if (result != 0) {
            return result;
        }
        matrix[st_r+1][(st_cl)] = '.';  // Backtrack
    }

    return 0;
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int t = parse_int(ltrim(rtrim(readline())));

    for (int t_itr = 0; t_itr < t; t_itr++) {
        char** first_multiple_input = split_string(rtrim(readline()));

        int n = parse_int(*(first_multiple_input + 0));

        int m = parse_int(*(first_multiple_input + 1));

        char** matrix = malloc(n * sizeof(char*));

        for (int i = 0; i < n; i++) {
            char* matrix_item = readline();

            *(matrix + i) = matrix_item;
        }
       //firtsly i have find the starting position 
        int k = parse_int(ltrim(rtrim(readline())));
         int st_rw=0;int st_cl=0;
         for(int i=0;i<n;i++){
             for(int j=0;j<m;j++){
                 if(matrix[i][j]=='M'){
                     printf("%c",matrix[i][j]);
                     st_rw=i;
                     st_cl=j;
                 }
             }
         }
         //secondly i have make copy array initialized with zeros
           int** copy = malloc(n * sizeof(int*));
    for (int i = 0; i < n; i++) {
        copy[i] = malloc(m * sizeof(int));
        for (int j = 0; j < m; j++) {
            copy[i][j] = 0;
        }
    }
   
        char* result = countLuck(n,m, st_rw,st_cl,matrix,copy, k);
        
        printf("\n\n\n");
        fprintf(fptr, "%s\n", result);
    }

    fclose(fptr);

    return 0;
}

char* readline() {
    size_t alloc_length = 1024;
    size_t data_length = 0;

    char* data = malloc(alloc_length);

    while (true) {
        char* cursor = data + data_length;
        char* line = fgets(cursor, alloc_length - data_length, stdin);

        if (!line) {
            break;
        }

        data_length += strlen(cursor);

        if (data_length < alloc_length - 1 || data[data_length - 1] == '\n') {
            break;
        }

        alloc_length <<= 1;

        data = realloc(data, alloc_length);

        if (!data) {
            data = '\0';

            break;
        }
    }

    if (data[data_length - 1] == '\n') {
        data[data_length - 1] = '\0';

        data = realloc(data, data_length);

        if (!data) {
            data = '\0';
        }
    } else {
        data = realloc(data, data_length + 1);

        if (!data) {
            data = '\0';
        } else {
            data[data_length] = '\0';
        }
    }

    return data;
}

char* ltrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    while (*str != '\0' && isspace(*str)) {
        str++;
    }

    return str;
}

char* rtrim(char* str) {
    if (!str) {
        return '\0';
    }

    if (!*str) {
        return str;
    }

    char* end = str + strlen(str) - 1;

    while (end >= str && isspace(*end)) {
        end--;
    }

    *(end + 1) = '\0';

    return str;
}

char** split_string(char* str) {
    char** splits = NULL;
    char* token = strtok(str, " ");

    int spaces = 0;

    while (token) {
        splits = realloc(splits, sizeof(char*) * ++spaces);

        if (!splits) {
            return splits;
        }

        splits[spaces - 1] = token;

        token = strtok(NULL, " ");
    }

    return splits;
}

int parse_int(char* str) {
    char* endptr;
    int value = strtol(str, &endptr, 10);

    if (endptr == str || *endptr != '\0') {
        exit(EXIT_FAILURE);
    }

    return value;
}
